#################################################################
## USER BRIEFING SCRIPTS
#################################################################
#
#################################################################
# Briefing Announcement
# Called from [art_weekday_briefing]
# Called from [steff_weekday_briefing]
# In file: [automations/user_briefings.yaml]
#################################################################
daily_briefing_alert:
  alias: Daily Briefing Alert
  sequence:
  - service: notify.alexa_media
    data_template:
      target:
        - media_player.kitchen_echo
      data:
        type: announce
      message: >-
        Your daily briefing is about to start.
#
#################################################################
# Art Briefing One
# Called from [art_weekday_briefing]
# In file: [automations/user_briefings.yaml]
#################################################################
art_briefing_one:
  alias: Art Briefing One
  sequence:
  - service: notify.alexa_media
    data_template:
      target:
        - media_player.kitchen_echo
      data:
        type: tts
      message: >-
        {# Salutation #}
        Good {{states.sensor.time_of_day.state}} Art.
        {# Time #}
        The time is {{states.sensor.readable_time.state.lstrip('0')}}.
        Today is a
        {% if states.sensor.payday.state == 'True' %}
        payday
        {% endif %}
        {{states.sensor.dayoftheweek.state}}
        and the date is the {{states.sensor.dateofthemonth.state}} of {{states.sensor.month_name.state}}.
        {# Birds #}
        {% if states.sensor.weigh_birds.state == 'true' %}
        It's time to weigh the birds again.
        {% endif %}
        {# Birthday/Holiday #}
        {% if states.sensor.todays_events.state != 'unknown' %}
          {% if states.sensor.todays_events.state != '' %}
            Don't forget, it's {{states.sensor.todays_events.state}} today.
          {% endif %}
        {% endif %}
        {# Weather #}
        It's currently {{states.sensor.dark_sky_summary.state}} and {{states.sensor.dark_sky_temperature.state}} degrees at home.
        Today will be {{states.sensor.dark_sky_hourly_summary.state|replace('.','')}}, with a high of {{states.sensor.dark_sky_daytime_high_temperature_0d.state|round(1)}} degrees and a low of {{states.sensor.dark_sky_overnight_low_temperature_0d.state|round(1)}} degrees.
        {% if state_attr('weather.dark_sky', 'forecast')[0].precipitation | float > 0.1 %}
          We may see {{state_attr('weather.dark_sky', 'forecast')[0].precipitation}} inches of rain today.
        {% endif %}
        {# Winds #}
        Current winds are
        {% set winbearing = ((state_attr('weather.dark_sky','forecast')[0].wind_bearing/45)|round +1) %}
        {% set winddir = ['North', 'North East','East','South East','South','South West','West','North West']%}
        {{ winddir[winbearing]}} at {{(states('sensor.dark_sky_wind_speed_0')|int)|round}}
        {% if states('sensor.dark_sky_wind_gust_0d') | float > 0 %}
          with gusts up to {{(states('sensor.dark_sky_wind_gust_0d')|int)|round}}
        {% endif %}
        miles per hour.
        {# NWS Warnings #}
          {% if states.sensor.nws_alert_event.state != '' %}
            The National Weather Service has issued a {{states.sensor.nws_alert_event.state}} for today.
          {% endif %}
        {# Sunrise/Sunset #}
        Sunrise
        {% if states('sun.sun') == 'above_horizon' %}
          was at
        {% else %}
          is at
        {% endif %}
        {{states.sensor.next_rising.state}}
        and sunset will be at
        {{states.sensor.next_setting.state}}.
        {# Moon #}
        {% if states('sensor.moon') == 'full_moon' %}
          There will be a Full Moon tonight.
        {% endif %}
        {# Tides #}
        The next {{states.sensor.noaa_tides.state|replace('at','is at')}}.
        {# Trash Day #}
        {% if states.sensor.dayoftheweek.state == 'Thursday' %}
        Today is Thursday. The trash bin needs to be out to the road.
        {% endif %}
        {# Recycling Day #}
        {% if states.sensor.date.state == states.input_datetime.recycle_pickup_date.state %}
        Today is Monday. The recycling bin needs to be out to the road.
        {% endif %}
        {# Holiday Lighting #}
        {% if (states.sensor.season.state != (states.input_select.season_holiday.state)|lower()) %}
        Remember to look for the {{ states.input_select.season_holiday.state }} lighting theme later tonight.
        {% endif %}
        {# Closing #}
        Have a{{ [" pleasant", " great", " good", " cheerful", " delightful", "n enjoyable", " super", " wonderful", " satisfying"] | random }} day!
#
#################################################################
# Steff Briefing One
# Called from [steff_weekday_briefing]
# In file: [automations/user_briefings.yaml]
#################################################################
steff_briefing_one:
  alias: Steff Briefing One
  sequence:
  - service: notify.alexa_media
    data_template:
      target:
        - media_player.kitchen_echo
      data:
        type: tts
      message: >-
        {# Salutation #}
        Good {{states.sensor.time_of_day.state}} Steff.
        {# Time #}
        The time is {{states.sensor.readable_time.state.lstrip('0')}}.
        Today is a
        {% if states.sensor.payday.state == 'True' %}
        payday
        {% endif %}
        {{states.sensor.dayoftheweek.state}}
        and the date is the {{states.sensor.dateofthemonth.state}} of {{states.sensor.month_name.state}}.
        {# Birds #}
        {% if states.sensor.weigh_birds.state == 'true' %}
        It's time to weigh the birds again.
        {% endif %}
        {# Birthday/Holiday #}
        {% if states.sensor.todays_events.state != 'unknown' %}
          {% if states.sensor.todays_events.state != '' %}
            Don't forget, it's {{states.sensor.todays_events.state}} today.
          {% endif %}
        {% endif %}
        {# Weather #}
        It's currently {{states.sensor.dark_sky_summary.state}} and {{states.sensor.dark_sky_temperature.state}} degrees at home.
        Today will be {{states.sensor.dark_sky_hourly_summary.state|replace('.','')}}, with a high of {{states.sensor.dark_sky_daytime_high_temperature_0d.state|round(1)}} degrees and a low of {{states.sensor.dark_sky_overnight_low_temperature_0d.state|round(1)}} degrees.
        {% if state_attr('weather.dark_sky', 'forecast')[0].precipitation | float > 0.1 %}
          We may see {{state_attr('weather.dark_sky', 'forecast')[0].precipitation}} inches of rain today.
        {% endif %}
        {# Winds #}
        Current winds are
        {% set winbearing = ((state_attr('weather.dark_sky','forecast')[0].wind_bearing/45)|round +1) %}
        {% set winddir = ['North', 'North East','East','South East','South','South West','West','North West']%}
        {{ winddir[winbearing]}} at {{(states('sensor.dark_sky_wind_speed_0')|int)|round}}
        {% if states('sensor.dark_sky_wind_gust_0d') | float > 0 %}
          with gusts up to {{(states('sensor.dark_sky_wind_gust_0d')|int)|round}}
        {% endif %}
        miles per hour.
        {# NWS Warnings #}
          {% if states.sensor.nws_alert_event.state != '' %}
            The National Weather Service has issued a {{states.sensor.nws_alert_event.state}} for today.
          {% endif %}
        {# Sunrise/Sunset #}
        Sunrise
        {% if states('sun.sun') == 'above_horizon' %}
          was at
        {% else %}
          is at
        {% endif %}
        {{states.sensor.next_rising.state}}
        and sunset will be at
        {{states.sensor.next_setting.state}}.
        {# Moon #}
        {% if states('sensor.moon') == 'full_moon' %}
          There will be a Full Moon tonight.
        {% endif %}
        {# Tides #}
        The next {{states.sensor.noaa_tides.state|replace('at','is at')}}.
        {# Arts Location #}
        {% if states('device_tracker.art_ot1') != 'home' %}
        Art is
          {% if states('device_tracker.art_ot1') == 'Shands' %} currently at Shands Hospital.
          {% elif states('device_tracker.art_ot1') == 'Baptist' %} currently at Baptist Hospital.
          {% elif states('device_tracker.art_ot1') == 'Memorial' %} currently at Memorial Hospital.
          {% elif states('device_tracker.art_ot1') == 'St Vincents' %} currently at St Vincents Hospital.
          {% else %}
            away from home.
          {% endif %}
        {% endif %}
        {# Trash Day #}
        {% if states.sensor.dayoftheweek.state == 'Thursday' %}
        Today is Thursday. The trash bin needs to be out to the road.
        {% endif %}
        {# Recycling Day #}
        {% if states.sensor.date.state == states.input_datetime.recycle_pickup_date.state %}
        Today is Monday. The recycling bin needs to be out to the road.
        {% endif %}
        {# Holiday Lighting #}
        {% if (states.sensor.season.state != (states.input_select.season_holiday.state)|lower()) %}
        Remember to look for the {{ states.input_select.season_holiday.state }} lighting theme later tonight.
        {% endif %}
        {# Closing #}
        Have a{{ [' pleasant', ' amiable', ' happy', ' cheerful', ' delightful', 'n enjoyable', ' lovely', ' pleasing', ' good'] | random }} day!
#
#################################################################
# Test Briefing One
# Called from [test_briefing]
# In file: [automations/user_briefings.yaml]
#################################################################
test_briefing_one:
  alias: Test Briefing One
  sequence:
  - service: notify.alexa_media
    data_template:
      target:
        - media_player.office_echo
      data:
        type: tts
      message: >-
        {# Salutation #}
        Good {{states.sensor.time_of_day.state}} Art.
        {# Time #}
        The time is {{states.sensor.readable_time.state.lstrip('0')}}.
        Today is a
        {% if states.sensor.payday.state == 'True' %}
        payday
        {% endif %}
        {{states.sensor.dayoftheweek.state}}
        and the date is the {{states.sensor.dateofthemonth.state}} of {{states.sensor.month_name.state}}.
        {# Birds #}
        {% if states.sensor.weigh_birds.state == 'true' %}
        It's time to weigh the birds again.
        {% endif %}
        {# Birthday/Holiday #}
        {% if states.sensor.todays_events.state != 'unknown' %}
          {% if states.sensor.todays_events.state != '' %}
            Don't forget, it's {{states.sensor.todays_events.state}} today.
          {% endif %}
        {% endif %}
        {# Weather #}
        It's currently {{states.sensor.dark_sky_summary.state}} and {{states.sensor.dark_sky_temperature.state}} degrees at home.
        Today will be {{states.sensor.dark_sky_hourly_summary.state|replace('.','')}}, with a high of {{states.sensor.dark_sky_daytime_high_temperature_0d.state|round(1)}} degrees and a low of {{states.sensor.dark_sky_overnight_low_temperature_0d.state|round(1)}} degrees.
        {% if state_attr('weather.dark_sky', 'forecast')[0].precipitation | float > 0.1 %}
          We may see {{state_attr('weather.dark_sky', 'forecast')[0].precipitation}} inches of rain today.
        {% endif %}
        {# Winds #}
        Current winds are
        {% set winbearing = ((state_attr('weather.dark_sky','forecast')[0].wind_bearing/45)|round +1) %}
        {% set winddir = ['North', 'North East','East','South East','South','South West','West','North West']%}
        {{ winddir[winbearing]}} at {{(states('sensor.dark_sky_wind_speed_0')|int)|round}}
        {% if states('sensor.dark_sky_wind_gust_0d') | float > 0 %}
          with gusts up to {{(states('sensor.dark_sky_wind_gust_0d')|int)|round}}
        {% endif %}
        miles per hour.
        {# NWS Warnings #}
          {% if states.sensor.nws_alert_event.state != '' %}
            The National Weather Service has issued a {{states.sensor.nws_alert_event.state}} for today.
          {% endif %}
        {# Sunrise/Sunset #}
        Sunrise
        {% if states('sun.sun') == 'above_horizon' %}
          was at
        {% else %}
          is at
        {% endif %}
        {{states.sensor.next_rising.state}}
        and sunset will be at
        {{states.sensor.next_setting.state}}.
        {# Moon #}
        {% if states('sensor.moon') == 'full_moon' %}
          There will be a Full Moon tonight.
        {% endif %}
        {# Tides #}
        The next {{states.sensor.noaa_tides.state|replace('at','is at')}}.
        {# High Tide Warningss #}
        {# End High Tide Warningss #}
        {# Trash Day #}
        {% if states.sensor.dayoftheweek.state == 'Thursday' %}
        Today is Thursday. The trash bin needs to be out to the road.
        {% endif %}
        {# Recycling Day #}
        {% if states.sensor.date.state == states.input_datetime.recycle_pickup_date.state %}
        Today is Monday. The recycling bin needs to be out to the road.
        {% endif %}
        {# Holiday Lighting #}
        {% if (states.sensor.season.state != (states.input_select.season_holiday.state)|lower()) %}
        Remember to look for the {{ states.input_select.season_holiday.state }} lighting theme later tonight.
        {% endif %}
        {# Closing #}
        Have a{{ [" pleasant", " great", " good", " cheerful", " delightful", "n enjoyable", " super", " wonderful", " satisfying"] | random }} day!
#
#################################################################
# Test Briefing Two
# Called from [test_briefing]
# In file: [automations/user_briefings.yaml]
#################################################################
test_briefing_two:
  alias: Test Briefing Two
  sequence:
  - service: notify.alexa_media
    data_template:
      target:
        - media_player.office_echo
      data:
        type: tts
      message: Hello
#
# input_datetime.recycle_alert_date        2019-09-08
# input_datetime.recycle_pickup_date       2019-09-09
# sensor.date                              2019-08-26
# sensor.weatheralerts                     text
# sensor.weigh_birds                       true/False
# sensor.payday                            true/false
# input_select.season_holiday              season or holiday name
# sensor.season                            one of the 4 seasons
