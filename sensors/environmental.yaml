#############################################################
#             Environmental Templates                       #
#############################################################
#
############################
#    Air Quality Sensor    #
############################
# https://www.home-assistant.io/components/airvisual/
- platform: airvisual
  api_key: !secret airvisual_api_key
  monitored_conditions:
    - us
  show_on_map: false
  scan_interval: 14400
  latitude: 30.4758
  longitude: 81.5869
#  city: Jacksonville
#  state: Florida
#  country: USA
# ?lat=30.4758&lng=-81.5869&zoomLevel=10
#
# https://www.home-assistant.io/integrations/waqi/
#- platform: waqi
#  token: !secret waqi_token
#  locations:
#    - city/usa/florida/duval
#  stations:
#    - sheffield-elementary
#    # city/usa/florida/duval/sheffield-elementary/
#
############################
#    Pollutant Types       #
############################
- platform: template
  sensors:
    pollutant_type:
      value_template: >-
        {% if is_state('sensor.us_main_pollutant', 'PM2.5') %}
          Fine Particulate Matter
        {% elif  is_state('sensor.us_main_pollutant', 'PM10') %}
          Particulate Matter
        {% elif  is_state('sensor.us_main_pollutant', 'O') %}
          Ozone Pollution
        {% elif  is_state('sensor.us_main_pollutant', 'SO2') %}
          Sulfur Dioxide
        {% elif  is_state('sensor.us_main_pollutant', 'CO') %}
          Carbon Monoxide
        {% else %}
          Unknown
        {% endif %}
      icon_template: >-
        {% if is_state('sensor.us_main_pollutant', 'PM2.5') %}
          mdi:scatter-plot
        {% elif  is_state('sensor.us_main_pollutant', 'PM10') %}
          mdi:scatter-plot-outline
        {% elif  is_state('sensor.us_main_pollutant', 'O') %}
          mdi:atom-variant
        {% elif  is_state('sensor.us_main_pollutant', 'SO2') %}
          mdi:radioactive
        {% elif  is_state('sensor.us_main_pollutant', 'CO') %}
          mdi:rhombus-split
        {% else %}
          mdi:chemical-weapon
        {% endif %}
      friendly_name: "Pollutant Type"
#
# Particulate (<= 2.5 μm)   PM2.5   Fine Particulate Matter
# Particulate (<= 10 μm)    PM10    Particulate Matter
# Ozone                     O       Ozone Pollution
# Sulpher Dioxide           SO2     Sulfur Dioxide (SO2)
# Carbon Monoxide           CO      Carbon Monoxide (CO)
#
############################
#     Bayesian Rain        #
############################
- platform: template
  sensors:
    bayesian_rain:
      value_template: "{{ ((states.binary_sensor.its_raining.attributes.probability) * 100) | int}}"
      friendly_name: "Bayesian Rain Probability"
      unit_of_measurement: '%'
#
#########################
#      Daylight         #
#########################
- platform: template
  sensors:
    daylight:
      value_template: >
        {% set nr = as_timestamp(state_attr('sun.sun','next_rising')) %}
        {% set ns = as_timestamp(state_attr('sun.sun','next_setting')) %}
        {% if nr > ns %}
          {% set nr = nr - 60*60*24 %}
        {% endif %}
        {{ (ns - nr)|timestamp_custom('%H:%M',false) }}
      friendly_name: "Daylight Hours"
#
#########################
#         Moon          #
#########################
- platform: moon
#
#########################
#      Moon Icon        #
#########################
- platform: template
  sensors:
    moonphases:
      entity_id: sensor.moon
      friendly_name: 'Moon'
      value_template: >
        {{ states('sensor.moon').title().replace('_',' ') }}
#        {{ set state = states.sensor.moon.state }}
      entity_picture_template: >
        {% set state = states('sensor.moon').title().replace('_','_') %}
          {{ '/local/moon_icons/{}.png'.format(state) }}
#
############################
#    PWS WeatherSensors    #
############################
#- platform: template
#  pws_alert_type:
#    value_template: "{{ (states.sensor.pws_alerts.attributes.description) }}"
#    friendly_name: "Weather Alert Type"
#  pws_alert_text:
#    value_template: "{{ (states.sensor.pws_alerts.attributes.attribution) }}"
#    friendly_name: "Weather Alert Text"
#
#########################
#    Seasons            #
#########################
- platform: season
  type: meteorological
#
#########################
#  Sun/Sunrise/Sunset   #
#########################
- platform: template
  sensors:
    sun_elevation:
      value_template: "{{ (states.sun.sun.attributes.elevation | round(2)) }}"
      friendly_name: "Sun Elevation"
    next_sunrise:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Next Sunrise"
    next_rising:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%-I:%M %p") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Next Sunrise"
    next_sunset:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Next Sunset"
    next_setting:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%-I:%M %p") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Next Sunset"
#
#########################
#    Tides (NOAA)       #
#########################
- platform: noaa_tides
  station_id: 8720198
- platform: template
  sensors:
    high_tide_height:
      value_template: '{{state_attr("sensor.noaa_tides","high_tide_height")}}'
      friendly_name: "High Tide Height"
      icon_template: >-
        mdi:trending-up
- platform: template
  sensors:
    low_tide_height:
      value_template: '{{state_attr("sensor.noaa_tides","low_tide_height")}}'
      friendly_name: "Low Tide Height"
      icon_template: >-
        mdi:trending-down
- platform: template
  sensors:
    next_high_tide:
      value_template: '{% set timestamp = as_timestamp(state_attr("sensor.noaa_tides","high_tide_time")) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
#      value_template: >-
#        {{ as_timestamp(state_attr("sensor.noaa_tides","high_tide_time")) | timestamp_custom('%x', True) }}
      friendly_name: "Next High Tide"
      icon_template: >-
        mdi:clock-outline
- platform: template
  sensors:
    next_low_tide:
      value_template: '{% set timestamp = as_timestamp(state_attr("sensor.noaa_tides","low_tide_time")) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
#      value_template: >-
#        {{ as_timestamp(state_attr("sensor.noaa_tides","low_tide_time")) | timestamp_custom('%x', True) }}
      friendly_name: "Next Low Tide"
      icon_template: >-
        mdi:clock-outline
#
#########################
#  Tides (World Tides)  #
#########################
#- platform: worldtidesinfo
#  api_key: !secret world_tide_api_key
#
#- platform: template
#  next_low_tide:
#    value_template: '{% set timestamp = as_timestamp(states.sensor.worldtidesinfo.attributes.low_tide_time_utc) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
#    friendly_name: "Next Low Tide"
#  next_high_tide:
#    value_template: '{% set timestamp = as_timestamp(states.sensor.worldtidesinfo.attributes.high_tide_time_utc) | timestamp_custom("%b %d, %X") %} {{ timestamp.lstrip("0") }}'
#    friendly_name: "Next High Tide"
#
#########################
#     T-Stat Temps      #
#########################
- platform: template
  sensors:
    tstat1_actual_temp:
      value_template: "{{ (states.climate.tstat_1_144.attributes.current_temperature | round(0)) }}"
      entity_id: climate.tstat_1_144
      unit_of_measurement: "°F"
      friendly_name: "Downstairs Temperature"
    tstat2_actual_temp:
      value_template: "{{ (states.climate.tstat_2_145.attributes.current_temperature | round(0)) }}"
      entity_id: climate.tstat_2_145
      unit_of_measurement: "°F"
      friendly_name: "Upstairs Temperature"
    tstat1_currentsetpoint:
      value_template: "{{ (states.climate.tstat_1_144.attributes.temperature | round(0)) }}"
      entity_id: climate.tstat_1_144
      unit_of_measurement: "°F"
      friendly_name: "Downstairs Set Point"
    tstat2_currentsetpoint:
      value_template: "{{ (states.climate.tstat_2_145.attributes.temperature | round(0)) }}"
      entity_id: climate.tstat_2_145
      unit_of_measurement: "°F"
      friendly_name: "Upstairs Set Point"
#
    tstat1_feels_like_temp:
      value_template: >-
        {% set t1_temp_c = ((states('sensor.tstat1_actual_temp')|float) - 32) * 5/9 %}
        {% set es1 = 0.6108 * e ** (17.27 * t1_temp_c / (t1_temp_c + 237.3)) %}
        {% set ea1 = ((states('sensor.kit_humidity_sensor_228') | float) / 100 * es1) %}
        {% set tp1 = -1.3 + 0.92 * t1_temp_c + 2.2 * ea1 %}
        {% set tpf1 = (tp1 * 9/5) + 32 %}
        {{ tpf1 | round(1) }}
#      entity_id: climate.tstat_1_144
      unit_of_measurement: "°F"
      friendly_name: "Downstairs Feels like"
    tstat2_feels_like_temp:
      value_template: >-
        {% set t2_temp_c = ((states('sensor.tstat2_actual_temp')|float) - 32) * 5/9 %}
        {% set es2 = 0.6108 * e ** (17.27 * t2_temp_c / (t2_temp_c + 237.3)) %}
        {% set ea2 = ((states('sensor.sun_room_hum_sensor_236') | float) / 100 * es2) %}
        {% set tp2 = -1.3 + 0.92 * t2_temp_c + 2.2 * ea2 %}
        {% set tpf2 = (tp2 * 9/5) + 32 %}
        {{ tpf2 | round(1) }}
#      entity_id: climate.tstat_2_145
      unit_of_measurement: "°F"
      friendly_name: "Upstairs Feels like"
#     es = {# Saturation vapor pressure in kPa #}
#     ea = {# Actual vapor pressure in kPa #}
#     tp = {# Apparent temperature in C #}
#########################
#  Weather.gov Alerts   #
#########################
# See REST sensors for weather data
#- platform: weatheralerts
#  sameid: '012031'
#
